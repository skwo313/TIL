# 주요학습범위
1. java2 시작
	- 1:다 관계
2. 예외처리

# 생각해봅시다.
1. 테이블 구조와 함꼐 연결되는 VO 클래스 처리에 있어서, 데이터처리를 위한 기능메서드는 어떤 것이
	필요로 하는가?
	- DB 처리(기본 query문 작성)
	- query문(sql) 작성시
		조건문과 입력/수정/삭제에 넣은 데이터를 위해서도 기본형 데이터 유형, VO(데이터) 필요
		작성하여 결과데이터를 저장할 떄도 기본형 데이터 유형 VO/ArratList<VO>가 필요
	- 필요로 하는 기능메서드
		public int quertySelect(Emp sch){
			// DB처리.
			return count; // 데이터베이스 처리결과
		}
		public Emp queryOne(int empno){
			return emp; // key값인 경우 단일 객체로 가져온다.
		}
		public ArrayList<Emp> getEmpList(Emp sch){
			return list; // 여러개의 리스트 데이터 가져온다.
		}
	
2. 프로그래밍에 있어서 예외는 어떠한 경우에 필요로 하고, 필수예외란 무엇을 말하는가?
	1) 프로그램은 항상 에러가 발생한다.
		- 개발자의 잘못된 코드
		- 예상치 못한 상황에서 프로그래밍이 실행
		- 여러가지 개발환경(OS, 연동하는 서버 등)에 의해서도 발생
	2) 프로그램의 신뢰성을 가지게 하는 것은 안정성 확보이다.
		- 현재 상태에 대한 메시지 전달
		- 프로그램이 다른 방법으로 대체하여 처리
		- 지속적으로 프로그래밍이 진행되는 모습을 보여준다.
	3) 예외처리란 위와 같은 경우에 프로그램을 중단시키지 않고 처리해주는 것을 말한다.
	4) 예외처리 종류
		- 컴파일 예외 처리(필수예외)
			- 저장시, class파일로 생성자체가 되지 않는다.
			- 예외가 일어나 가망성이 많고, 일어 났을 때, 프로그램에 치명적인 오류가
				발생할 가능성 있는 것은 프로그램적으로 예외를 처리해야 컴파일이 되기 사전에
				예약해놓는다.
				ex) 메모리 로딩, IO(input/output)가 일어나는 경우, 치명적으로 영향을 미칠 수 있는
					api 객체 사용.
		- 실행 예외 처리
			- 컴파일 후, 실행시 발생하는 예외로
				데이터가 없는데, 해당 객체의 메서드를 호출할 때, 수학적으로 무한대가 처리되는 데이터,
				배열의 특정위치에 데이터가 없는데 호출되는 경우 등등에서 발생한다.
	
3. 예외는 위임이라는 개념이 있는데, 실제 현업에서 처리되는 위임되는 경우는 어떤 경우인가?
	- 메서드 단위로 해당 메서드 코드 블럭에서 처리해야할 예외처리를 이 메서드를 호출하는 곳으로 위임하여 
		처리하는 경우를 예외 위임이라고 한다.
		public void call() throws 예외객체{
			try{}catch{} ==> 여기서 처리하지 않고, 이 메서드를 호출하는 곳에서 한꺼번에 예외 처리
		}
		public void call1() throws 예외객체{}
		public void call2() throws 예외객체{}
		try{
			p01.call();
			p01.call1();
			p01.call2();
		}catch(위임된 예외){
			예외 처리..
		}
		

# 학습목표
1. 객체의 1:1관계 1:다관계를 이해할 수 있다.
2. 위 1:1, 1:다관계 VO 객체를 통해서 여러가지 DB 처리에 필요한 기능 메서드의 형태를 확인하고 활용할 수 있다.
3. 예외 처리를 위한 기본 코드 패턴을 이해하고 활용할 수 있다.
4. 예외가 처리되는 종류와 필수 예외에 대한 코드 패턴을 이해하고 활용할 수 있다.

# 주요핵심 keyword
try{

}catch(Exception e){
	e.getMessage()
}finally{

}
throw : 사용자 정의 예외 처리
throws : 예외 위임

# 주요 진행계획
1. 1:다관계 연습
2. 예외처리
3. 
