# 주요학습범위
1. 조건문 if, if else, switch case
2. 반복문 for, while, do while
3. 함수 사용자정의함수, 내장함수

# 생각해봅시다.
1. 프로그래밍의 처리에서 순서도에서 필요로 하는 조건문/반복문은 어떤 영향을 미치는가?
	알고리즘 : 문제해결을 위한 적절한 순서로 처리하는 것을 말한다.
	에러 - 오타 : 실행 시 일단 기본적인 log내용을 확인해보고 어떤 의미인지 확인한다.
			기본 코드에서 정확하게 암기하고 있는지 틀린 부분이 없는지 확인한다.
	오타를 줄이기 위한 방법적인 알고리즘
		1) 기본 코드에 대한 평소에 암기나 이해에 시간을 투자한다.
		2) 여러가지 에러에 대한 내용을 정리해 두고, 추후에 대응 방법을 마련한다.
		3) 오타가 났을 때, 자기만의 해결 시간을 마련해두고 처리를 하고 해결 방법을 정리해본다.
		4) 집중력에 방해가 되는 부분이 무엇이 있는지 생가해보고, 집중력시간을 확보해본다.
	프로그래밍 처리를 위한 알고리즘 마련하기.
		1) 문제를 제시했을 때, 필요로 하는 기능 키워드가 생각이 날 수 있도록 지속적으로
			암기와 코드 연습을 하기
		2) 일단, 처리할 순서를 기술해보고, 필요로 하는 변수를 선언해보고, 순서에 문제가 없는지
			확인한다.
			- 메모리(변수)
			- 필요로 하는 조건/반복문/...
			- 필요로 하는 기능 함수 형식//
			- 최종 결과는 어떻게 표현할까?
		3) 자신이 문제를 고민하는 시간을 일단 확보를 해서, 진행해보도록 한다.
			
		
2. 함수는 어떠한 경우에 주로 이용되고 있고, 함수 처리를 위해 꼭 알아야 할 개념을 무엇인가?
	1) 만들어진 처리내용을 긴 코드로 반복적으로 코딩하는 것보단 하나의 함수로 정의해서,
		정의된 함수명으로만 데이터를 입력하고 결과를 받아 처리한다.
		ex) 자판기.
	2) 함수의 기본 형식이 무엇인가?
		- 선언 부분 : function 함수명(){}
		- 데이터를 입력하는 부분 : 함수명(입력데이터1, 입력데이터2);
		- 처리하는 프로세스: 함수명(){ 사이에 처리할 여러가지 조건문, 반복문}
		- 결과데이터를 받는 부분 : 함수처리 마지막에 return 리터할데이터;

# 학슴목표
1. 여러가지 조건문의 형식을 이해하고 해당 코드를 정확하게 알고 활용할 수 있다.
2. 반복문의 형식을 이해하고 코드를 암기를 하며 여러가지 상황에 따라 조건문을 사용할 수 있다.
3. 함수의 형식을 알고, 함수가 활용되는 상황에 맞게 적절하게 데이터를 입력하고 리턴할 수 있다.
4. ECMA에서 사용되는 함수처리형식을 알고 활용할 수 있다.
5. 내장된 함수의 기능을 파악하고, 여러가지 함수의 기능내용을 알고 활용할 수 있다.

# 주요핵심 keyword
1. if, if else, switch case, break, continue
2. for(;;) for( in ){} while(){}, do{}while();
3. function 함수(){};
4. eval(), parseInt, parseFloat(), isFinite()-절대값, isNaN()
5. () => {} : 화살표함수
	var fun01 = function(){};

# 개념 및 원리이해