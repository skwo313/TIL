# Vue의 knowledge Map
1. 개발환경 구성
	1) lib 형식
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	2)
2. Vue의 MVVM 구조 이해하기 및 속성 지정
	1) view
	2) model
	3) view model
3. Vue의 기초 문법 사용
	1) 변수 directive
		{{}}, v-text, v-html
	2) 속성 directive
		v-bind:속성="속성값"
	3) 쌍방향 directive
		v-model="모델명"
	4) 조건문/반복문 directive
		v-show
		v-if, v-else-if, v-else
		v-for = "(단위, index/prop) in 배열/객체"
	5) 기타 디렉티브
		v-once, v-cloak
4. Vue 인스턴스	
	1) 주요 속성 : el, data
	2) 메서드형 
		computed
		watch
		methods
		-----
		라이프사이클 관련메서드
	
4. 이벤트 처리
	1) 이벤트 형식
		- @이벤트명="핸들러함수", v-on:이벤트="핸들러함수"	
		- 인라인
		- methods 속성을 통해 핸들러 함수 정의
	2) 이벤트 처리 코드
		<요소객체 @click="callEvent"
		
		methods:{
			callEvnt:function(){
			}
		}
5. 스타일 처리
	1) 기본 css를 모델데이터와 연동하여 동적인 데이터 처리를 위해서 활용한다.
	2) 기본 형식
		:style="모델명 or {css속성:속성값}
		:class="모델명 orc{클래스명:true,....}
	3) 처리형식
		data:{모델명},
		computed:{함수명:function(){}}	
		methods:{함수명:function(){}}	
6. 컴포넌트 처리		
	0) 기본 형식
		Vue.component("컴포넌트명",{
			속성:속성값
		});
	1) 컴포넌트 기본 구성 요소(속성)
		template:""
		data:function(){
			return "{모델명:모델값}"
		} 		
		vue인스턴스 사용 기능 메소드와 동일
	2) 계층형 데이터 처리
		props, this.$emit()
	3) 컴포넌트와 컴포넌트간의 데이터 전송 처리.
7. 서버통신(ajax)
	1) jquery
	2) axios
8. vuex를 이용한 상태관리
	











# vue 컴포넌트 이벤트 함수
1. 주요 변수
	모델 데이터 : data:function(){ return {모델명:모델값}}
	함수 : methods:{ 함수명:function(){ 처리할 함수 내용}}
	이벤트 : template에서 선언<요소객체 @이벤트명="함수명">
	화면 (body)에소 호출 방법
		<컴포넌트명></컴포넌트명>
		
2. 개발 순서
	1) 템플릿 정의
	<template id=":