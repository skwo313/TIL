# 자바의 지식체계
1. Java에 대한 이해 
	1) Java의 특징
		- platform 독립적 : 운영체제 상관없이 실행 가능
		- 객체지향적인 프로그램이다.
		- 메모리관리를 자동으로 해준다.(JVM)
	2) 실행과정 
		- java ==> .class ==> 실행결과
		- 코드 작성 @@@.java
		- 컴파일 : javac @@@.java ==> @@@.class
			이클립스에서는 저장을 하면 해당 클래스로 binary 파일이 만들어진다.
		- 실행 : main()메서드를 포함하는 클래스이어야 한다
			java @@@  : @@@.class 파일을 실행 처리..
			main(){} 블럭을 수행 처리
				jvm의 메모리에 로딩하여 처리를 한다.
		
	3) 기본입력과 출력
		System.out.println("출력할문자열-줄바꿈포함");
		System.out.println("문자열"+"문자열");
		System.out.print(); // "줄바꿈없이 출력"
		\n (줄바꿈처리), \t (탭간격처리)
		
		Scanner sc = new Scanner(System.in)
		Scanner: console을 통해 입력하는 내용을 처리해줄 수 있는 자바 내부의 api객체
		new Scanner(System.in) : 객체를 생성
		System.in : 기본적인 입력을 처리하는 stream 객체를 생성자의 매개변수로 받아들이고 있다. 
		
2. 에러잡기 
	1) main()에서 수행 
	2) 명령어는 대소문자 구분하여야 한다.
	3) 클래스명 객체 대문자로 하여야 한다.
		대문자로 시작 : 클래스명, 객체명
			ex) class Person{},
				Person p;
				String str;
		소문자로 시작 : 변수명, 참조변수
	4) 마지막 명령어 끝에는 ;(세미클론)이 있어야 한다.
		- 선언할 때는 중괄호 블럭을 사용하여 세미클론을 쓰면 안된다
			Person(String name);{} (x) ==> Person(String name){}
		- 호출시에 ;를 사용한다
			Person p = new Person("홍길동")
			p.call();
	5) ** 코드는 {}(중괄호) 단위로 계층적으로 코딩하여야 하며, 반드시 시작 마지막에 주의 하여야 한다.
		특히, 탭간격에 잘 활용하여야 한다. ***
		- 괄호는 시작/끝 먼저 만들고, 필요에 따라 사이에 커서를 위치시킨 후에 enter키로 입력하여
			코드를 처리한다
			ex) 프로그램에서 사용되는 괄화는 가능한한 먼저 시작과 끝을 만들고, 중간에 삽입하는 형식으로 진행
			() : 소괄호, 매개변수를 입력처리할 때, 활용
			Person(String name){
			
			}
			for(int num01=1;num01<=25;num01++){
			
			}
			{} : 중괄호, 클래스명/생성자/매서드에 범위를 지정하고, 조건/반복문에서 주로 활용한다
				int [] arry = {1000,2000,3000} // 자바에서만 데이터 선언할당시 중괄호를 이용한다
			[] : 대괄호, 주로 배열에서 호출할 때 사용된다
				arry[10]=500;
		- 클래스/메서드/생성자/조건/반복문에 사용할 떄 , 계층을 탭간격으로 구분하여 사용하는 것이 가독성이
			좋고, 에러를 찾기에도 손쉽다.
			class Person{
				// 종속된 구성 요소들을 탭간격으로 계층 하위라는 것을 표시한다
				int age;
				String name;
				void call(){
					// 하위에 종속된 내용도 탭간격으로 종속을 나타낸다
					age = 25;
					if(age>=20){
						// 조건문에도 종속을 표기하여 처리한다
						System.out.println("성인");
					}
				}	
			}			
	6) 변수를 중복 선언 사용시 에러발생..
		선언 : 데이터유형을 지정하여 변수를 기술했을 떄 선언이라고 한다. 앞에 데이터 유형을 지정하지
			않으면 기존의 변수에 재할당이어서 다시 코드를 기술하여도 무방하다
		int num01;
		int num01 = 25; // (x) 에러발생
		- 코드가 길어져서 선언된 변수인지 모르고 다시 선언하는 경우가 많다. 이런 겨우 아래 7번으로 에러를 알 수 있다
			duplicate local variables
	7) 빨간색에 커서 위치 시키면 에러 내용 확인
3. 변수와 타입
	1) 변수의 선언과 할당 
		// 숫자형
		int num01;
		num01 = 25;
		// 문자열은 객체이면, 객체형데이터는 대문자로 시작한다.
		String name = "홍길동";
	2) 데이터 타입
		기본데이터 유형 (primitive data type)
			정수형 : byte, short, **int, long, char(문자) 
				int <===> char : 문자는 unicode값으로 연결되어, 데이터유형
				변환에 의해서 해당 문자 또는 코드값인 정수데이터를 확인할 수 있다.
				ex: char01 = 'b'; //문자는 혿따움표
				 
			실수형 : float, **double
				소숫점이하 데이터까지 할당하여 처리할 수 있다.
			boolean : true/false
		객체형유형
			배열형 : int [ jarry=(1000,2000,3000)
			내장된 api객체
			사용자정의 객체
	3) 타입의 변경
		작은데이터유형 ==> 큰 데이터 유형 (promote)
			int num01 = 25;
			double num02 = num01;
			25.0 이라는 데이터가 num02에 할당되어 있다, promote라고 한다
			ex) 작은 컵에 있는 물을 큰 컵에 담는 경우
		큰데이터유형 ==> 작은 데이터 유형 (casting)
			double num03 = 35.7;
			int num04 = num03; (x) 에러 발생,
			캐스팅이 필요로 하다.
			특정한 데이터 유형 강제 변환 처리
			int num05 = (int)num03;
			ex) 큰 컵에 있는 물을 작은 컵에 담는 경우
			num05는 35라는 데이터로 할당이 된다.
		숫자 ==> 문자열
		문자열 ==> 숫자
			"25" + "30" ==> "2530"
			Integer.parseInt("25") + Integer.parseInt("30")
				25 +30 ==> 55
4. 연산자
	1) 연산자와 연산식
		산술연산자
		대입연산자
		증감연산자 
			num05++; 데이터가 1씩 증가한다
			num05--; 데이터가 1씩 감소된다
			증감대입연산자 : 2개씩 이상 증가할 떄, 활용된다.
				num05 = num05 + 2; 현재 할당된 데이터에서 2를 더해서 다시 num05에 할당처리
				==> 간략화하여
				num05 += 2;
				num05 += 5; // 현재 저장된 데이터에서 5를 더해서 할당처리
		비교연산자 : >=, <=, >, <, ==, !=(두개의 값이 같지 않을 때,true)
			특정한 데이터를 비교연산자를 이용해서 boolean값을 결과로 처리되는 것을 말한다
			boolean isPass = num05 >= 5;
		논리연산자
			비교연산식을 연속해서 논리값을 처리할 때, 활용한다
			$$(and) : 두개의 비교연산식이 둘다 true일 때, true 그외는 false
				age>=14 && age>=18
			||(or) : 두개의 비교연산식이 둘다 false일 때, false 그 외는 true
				age<5 || age>=65
	2) 연산자와 우선순위
			(연산자)가 최우선, *//(곱셉과 나눗셈)
5. 조건문과 반복문
	1) 코드 흐름제어
	2) 조건문
		if(조건){
		}
	3) 반복문
		for(초기값;반복조건;증감연산자){
		}
		ex) for (int cnt=1;cnt<=10;cnt++){
				System.out.println(cnt);
			}
	4) continue/break;
		if문과 함께 반복처리시 해당 step 이후로 처리를 하지 않고, 다음 반복단계를 수행 처리
		ex) for(int cnt=1;cnt<=10;cnt++){
			if(cnt==5){
				continue;
			}
		}
		System.out.println(cnt); // 5만 출력되지 않고, 1~10까지 출력
		break : 반복문을 완전히 종료 처리
		ex) for(int cnt=1;cnt<=10;cnt++){
			if(cnt==5){
				break;
			}
		}
		System.out.println(cnt); // 5 이후 내용을 출력하지 않는다
==============================================================		
6. 메모리사용
	1) stack영역과 heap영역에 대한이해..
		cf) 도서관에서 책을 찾을 때, 효과적인 방법 (책을 찾는 단말기를 이용해서 해당 도서가 있는 위치를 호출)
		stack영역 : 작은 메모리 - 크기가 고정되어 있는 데이터 유형이니, 객체의 경우 heap영역이 주소값
		heap영역 : 객체가 할당할 수 있는 큰 메모리 영역
			배열이나 객체형태로 크기가 커질 수 있는 데이터유형이 실제 저장되는 곳
	2) 기본데이터 유형(byte, short, int, long, float, double, char, boolean)  
		stack영역 선언과 할당,
	3) 객체유형 
		stack영역에 객체의 heap영역의 주소
		heap영역은 실제 객체가 할당,
	4) 배열
		배열의 선언 
			데이터 유형[] 배열명;
			ex) int[] arry;
		배열의 객체 생성
			배열명 = new 데이터유형[배열의크기];
			ex) arry = new int[3];
		배열의 데이터 할당
			배열은 index 단위로 데이터를 할당할 수 있다.
			arry[0] = 25;
			arry[1] = 30;
			arry[2] = 5;
7. 클래스
	1) 클래스와 객체와의 관계
		실제 객체 지향적인 자바 프로그램을 가장 근간이 되는 object를 만들기 위한 설계도 역할이 클래스이다.
		기억(메모리) : 필드
		판단/행동 : 메서드
		위에 있는 객체를 설계도를 만들어서 객체를 생성하는 기준을 설정하는 코드를 클래스라고 한다.
		
		클래스는 소스코드 그 자체로는 binary파일(기계언어)로 까지만 만들어진다
		실행을 하려면 main()메서드가 있는 곳에서 호출하여야 한다.
		클래스를 통해 생성자로 만들어진 것을 객체라고 한다
	2) 클래스 구성요소
		- 저장하는 데이터를 할당하는 곳 : 필드
		- 외부에 있는 데이터를 입력받거나 특정한 기능을 처리하는 것: 생성자/메서드
			생성자 : 클래스와 동일하여 외부의 데이터를 필드에 할당하는 역할을 한다.
			main()
				Person p1 = new Person("홍길동");
				System.out.println("이름: "+ p1.name);
			class Person{
				String name;
				
				Person(String name){
					this.name = name; // this는 입력받는 변수와 구분하기위해 사용
				}
				String getname(int age){
					if(age>=20){
						"성인:"+name;
					}else{
						"미성년:"+name;
					)
					return name;
				}
			}
			Person p01 = new Person("홍길동")
			String name = p01.get(25)
			
			메서드 : 외부에 데이터를 입력 받아 기능적인 처리를 한다.
				- 리턴유형 : 마지막에 리턴할 데이터 유형
				- 매개변수 : 실제 호출되었을 때, 전달할 데이터의 유형을 선언한다
				- 프로세스 처리 : 조건문, 할당처리 등
				- 실제라틴값: 해당 메서드가 호출된 곳에 전달할 데이터
				
	3) static과 final
		static : 객체들을 공유 메모리 영역
		final : 클래스명 앞에, 필드명 앞에, 메서드명 앞
			필드명 : 변수를 상수화한다. - 한번 할당한 후에 변경하지 못하게 처리.
			클래스명 앞에는 상속을 처리할 수 없게 선언
			메서드명 앞에서는 재정의가 불가능하게 처리
		ex) 도면의 가격(static변수)는 이 도면으로 만들어지는 모든 건물에 영향을 미친다
	
	4) 접근제어자 : 클래스 구성요소에 대한 접근을 제한되게 처리할 수 있는 제어자..
		private, default(접근제어자를 선언하지 않음), protected, public
		encapsulation : 객체에 구성요소에 접근제한을 두어, 외부의 호출에 대하여 접근을 제한하는
		oop(객체지향프로그래밍)의 핵심 개년중 하나이다
		
		
8. 상속
	1) 기본상속
		객체를 상속 관계로 설정해서 사용할 것을 말한다.
		class Father{
			String name;
			int height=170;
			
			String getname(){
				return name;
			}
			
		}
		class Son extends Father {
			int weight = 70;
		}
		main()
		Son s1 = new Son();
		s1.height
		s1.getName()
		s1.weight;
				
	2) 메소드 재정의
		상위에 선언한 메서드를 다시 정의하여 사용하는 것을 말한다.
	
	3) 다형성
		상위 클래스의 내용을 여러가지 형태로 다양하게 만들어지게 하는 것을 말한다.
		Zerg
			Larba l1 = new Dron();
			Larba l2 + new Zergeling();
	
	4) 추상 클래스
		추상적인 메서드가 정의 되었을 때, 사용되는 클래스를 말한다.
		추상메서드와 일반 메서드가 공존한다
		
	5) 인터페이스
	
=== 기초 완료/api에 있는 내용 활용==================================	
9. 예외 처리..
	1) 프로그래밍에서 실행에러가 발생시, 정상적으로 수행이 될 수 있게끔 
		예외에 대비해서 코딩을 하는 것을 말한다
		try{
			예외가 나올만한 코드..
		}catch(Exception e){
			예외가 나왔을 때, 처리할 내용
		}
10. 기본 api 클래스
	1) 자바의 api 도규먼트
	2) String (문자열)
		equals, concat, replace()
	3) Wrapper 클래스
		기본 데이터 유형을 변경하여 기능적인 처리가 필요할 때, 객체와시 메서드를 사용하게 하는 것을 말한다
		byte ==> Byte
		int ==> Integer
			ex) Integer.parseInt("25")
	4) Math 수학적 함수처리.
		random() :
	
11. 쓰레드
	한번에 여러가지 유형을 처리하는 프로그래밍 방식 중 하나이다.
	하나의 프로그램에서 여러개의 처리가 한번에 가능하게 한다
	ex) 앱서버프로그램 
	time slice 
		5명이 접속
		|--1초---| 시간을 쪼개어 각각의 요청을 처리 
		|--2초---|
		|--3초---|
		|--4초---|
		|--5초---|
			
12. 제너릭 
	자바는 object가 최상위 클래스, 다양한 객체를 받을 수 있는데,
	이것을 특정객체로 고정화하여 처리하는 방법 중에 하나이다
	ArrayList
	
	
13. 람다식

14. 컬렉션 프레임워크
	List : 선형 리스트형 컬렉션 프레임워크
	Set : 중복불가 순서지키지 못하는 컬렉션 프레임워크
	Map : Key/value형 프레임워크

15. 스트림
	데이터의 입출력을 처리하는 객체..
16. 알고리즘
	1) 조건에 따른 알고리즘
	2) 최대/최소값
	3) 정렬처리..

# 객체를 사용 및 처리하기 위한 지식 계열화
1. 기본 데이터 유형에 대한 선언과 할당을 할 수 있는가?
2. 변수를 사용했을 떄, 나오는 에러의 유형을 알고 있는가?
3. 기본 데이터 유형과 객체형 데이터 유형을 구분할 수 있는가?
4. 클래스와 객체의 차이점을 알고 있는가?
5. 기능 메서드의 구성요소별로 기능을 알고, 실제 여러가지 경우에 코드를 할 수 있는가?
	1) 리턴값
	2) 매개변수
	3) 프로세스 처리 : 저장, 출력, 경우에 따른 조건/반복문 처리
6. 클래스 각 구성요소를 이해하고 사용할 수 있는가?
	1) 필드
	2) 생성자
	3) 메서드
	4) 각 구성요소들의 복합적 활용
7. 클래스에 선언된 static 변수와 일반변수의 차이점을 이해하고 사용할 수 있는가?
8. 객체와 객체의 연관관계의 설정을 활용할 수 있는가?
	1) 1:1객체
	2) 1:다 객체
9. 상속의 개념을 이해하고 활용할 수 있는가?
