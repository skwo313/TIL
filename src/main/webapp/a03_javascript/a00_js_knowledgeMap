# javascript knowledge map 
1. 개요
	환경 설정.
	javascript의 웹프로그램에서 역할, 실행 단계...
	에러 트래킹 f12, console.log("")
	외부설정 js 호출 방법
	처리순서 : 라인별 순차적으로 처리된다.
		dom의 경우, 태그가 호출되어 메모리가 로딩된 후,
		document.querySelector(),
		document.querySelectorAll()을 이용해서 호출하여야 한다.
		함수호출은 상단에 선언하더라도, 태그 객체들이 메모리로 로딩된 상황이기에 가능하다.
	입력/출력
		- 화면에서 입력/출력
			confirm(): boolean, prompt(): 입력된 문자열
			alert(): 메시지 경고창 출력, document.write(): 화면출력 
		- 내부적인 콘솔창에서 출력
			console.log()
2. 기본 문법
	변수 선언: var(일반변수선언), let(지역변수/전역변수구분), const(상수선언)
	데이터 유형 (5가지) : typeof(변수명)
		문자열(String), 숫자(number), boolean, 함수(function), 객체(object) - 배열 
	형변환 : 자동형변환(연산자), 
		"2" * "3" ==> 6
		"2" + "3" ==> "23" 
		"안녕하세요"+25+30 ==> 앞에 있는 문자열에 영향에 의해 25, 30은 문자열로 자동 형변환이 일어난다.
		+ 연산자만 기본적으로 연결처리해주고,
		연산을 하기위해, 형변환 함수(parseInt(), parseDouble(), Number()) 를 처리해주어야 한다. 
		ex) parseInt("25") + parseInt("30") ==> 55
		parseInt()의 경우 실수형을 정수형으로 casting 해주는 기능도 포함하고 있다
		if("25"==25) : 논리/비교연산식에서 자동 형변환이 일어난다, 이 경우는 true로 처리
		if("25" === 25) : 논리/비교연산식에서 ===, !==를 이용해서 데이터유형과 데이터값이 같은지 여부를 확인한다
						이 경우 false로 처리
		
	연산자- 대입/비교/논리
	삼항연산자 - (비교/논리)?true일때처리:false일 떄 처리
			ex) var result = point>=70?"합격":"불합격";
	# undefined 자료형
	- 선언이 되지 않는 변수호출시는 에러 발생
	- 선언은 되었으나 데이터를 할당하지 않는 경우, undefined 메시지 출력
	NaN(not a number) : 숫자형이 아닌데 연산처리할 때, 발생하는 에러..
		parseInt("이십오");
	
3. 조건문
	if else, switch 자바와 동일
4. 반복문
	for(), while(), do{} while{} 자바와 동일.
	for(var idx in 배열)
	for(var prop in 객체)
	
	내장함수를 통해서 배열을 효과적으로 처리하고 있다. forEach();
----------
5. 함수
	익명함수 : 변수에 이름없는 함수를 대입처리
		var fun01 = function(){};
	선언함수
		function fun02(){}
	내장함수 : setInterval: 시간 당 반복 처리, setTimeout: 특정 시간 후, 수행
		var set01 = setInterval(function(){
				if(조건문){
					clearInterval(set01); // 반복을 특정 조건에 의해 중단 처리
				}
			}
		,1000);
		parseInt(), parseDouble, Number()
		isNaN()
		eval("25+30") : 특정 문자열을 실행처리해주는 함수
		forEach : 배열의 데이터를 단위 데이터로 처리할 때, 사용된다 
6. 객체 
	json형태 객체처리
	var jObj = {속성: 속성값, 속성2:속성값, ...};
	jObj.속성
	// 새로운 속성을 추가할 수도 있고,
	delete jObj.속성 : 지정된 속성을 삭제할 수도 있다.
	
	var arry1 = [데이터1, 데이터2, 데이터3];
	var objArry = [{속성:속성값, 속성2:속성값},
				   {속성:속성값, 속성2:속성값},
				   {속성:속성값, 속성2:속성값},];
	
7. 생성자 함수(객체)
	함수형으로 객체의 구조를 선언하고, 호출 처리하는 형태
	function Person(name, age, loc){
		// 자바스크립트의 객체에 필드/메서드를 선언하고, 할당할 때 this.을 활용한다.
		this.name = name;
		this.age = age;
		this.loc = loc;
		this.show=function(){
			console.log("이름: "+this.name);
			console.log("나이: "+this.age);
			console.log("사는 곳: "+this.loc);
	}
	var p01 = new Person("홍길동", 25, "서울");
	p01.name;
	p01.show();
	// ecma6이후 버전에서는 아래와 같은 class 형태도 지원한다.
	class Product{
		constructor(name, price, cnt){	// 자바와 달리 생성자를 constructor 키워드를 사용한다
			this.name = name;
			this.price = price;
			this.cnt = cnt;
		}
		buy(){
			console.log(this.name);
			console.log("총계: "+(this.price*this.cnt));
		}
	}
	var prod = new product("사과", 3000, 2);
	prod.buy();
	
	
8. 내장 객체
	Math.floor()
	Math.ceil()
	Math.round()
	Math.random()
	Math.floor(Math.random()*경우의 수 + 시작수);
	parseInt(Math.random()*경우의 수 + 시작수);
	
	Data (날짜처리 객체)
	String (문자처리 객체)
	
	function call(){
		arguments : 함수 객체안에 사용되는 내장객체로 매개변수를 배열로 받아서 처리할 수 있다.
		arguments[0],
		arguments[1],
		arguments[2]
	}
	call(30);	// 가변적으로 매개변수를 사용할 수 있고, 해당 값을 순서에 따라
				// 내장객체인 arguments에 배열의 순서별로 할당해서 사용한다.
	call(2,5);
	call(4,2,4);

9. 브라우저 객체 모델(BOM) : 윈도우 창
	window.open("","",""); 브라우저 창이 새롭게 로딩되어 처리
10. ***문서 객체 모델(DOM) : 회면 출력
	태그를 객체화하여 속성을 변경하여 여러가지 동적인 처리
	1. 선택자의 유형
		태그 속성		선택형식
		id="아이디명" document.querySelector("#아이디명");
		class="클래스명" document.querySelector(".클래스명");
		name="속성값" document.querySelector("[name=속성값]");
			태그명 	document.querySelector("태그명");
					document.querySelectorAll("태그명");
		<상위태그>
			<하위태그>		document.querySelector("상위태그 하위태그");
			ex) <table id="tab01"
					<tr><td></td>
				하나의 화면에 테이블이 여러 개 있고, 특정 테이블 하위에 td를 선태개헛
				처리할 떄,
				var tds = doucument.querySelectorAll("#tab01 td");
	2. 다중 선택 여부
		하나의 객체 : document.querySelector
		여러개의 객체 : document.querySelectorAll
		
	
	<h1 align="center" style="color:green;">안녕하세요</h1>
	<h1 align="center" style="color:green;">반갑습니다</h1>
	
	var obj = document.querySelector("선택자");
	ex) var h1Obj = document.querySelector("h1");
		h1Obj.innerText = "좋은 날 시작입니다";
		h1Obj.align = "right";
		h1Obj.style.color = "blue";
		// 자바스크립트 프로그램으로 속성을 지정하는 것은 특정이벤트(click, 키입력 등)dmf
		통해서 속성을 동적으로 변경되게 처리하기 위함이다.
	
	
	var obj = document.querySelectorAll("선택자");
	같은 태그이름으로 화면에 여러객체가 있는 경우 활용. 태그, 클래스
	ex) var h1Arry = document.querySelectorAll("h1");
	h1Arry[0].innerText="첫번째 h1"
	h1Arry[1].innerText="두번째 h1"
	
	# 선택자(css에서 사용되는 선택자)
	1. 태그명 : document.querySelector("h1");
	2. 아이디명 : 화면단위 유일한 식별자를 속성을 지정했을 때,
		<input id="in01"/>
		document.querySelector("#in01");
	3. 클래스명 : 화면에 하나의 묶을 단위로 처리할 때, 지정형식
		<td class="cls01"></td>
		<td></td>
		<td class="cls01"></td>
		<td></td>
		<td class="cls01"></td>
		var cls01Arr = document.querySelectorAll(".cls01");
		cls01Arr[0]
		cls01Arr[1]
		cls01Arr[2]
	# DOM객체의 속성들.
	1) 화면 출력 처리 DOM
		.innerText : 출력할 내용을 할당하거나, 가져올 수 있다
		.innerHTML : html코드를 포함해서 랜더링을 할 필요가 있을 때..
			cf) div01.innerText = "<h2>안녕</h2><p>내용</p>";
					태그를 포함한 내용 그대로 출력
			cf) div01.innerHTML = "<h2>안녕</h2><p>내용</p>";
				태그가 적용되어(랜더링) 해당 태그의 기능내용을 포함해서 출력.
	2) .속성 = 속성값; (기본속성)
		ex) tab.align = "center"; // 테이블이나 h1 객체의 기본속성으로 중앙정렬처리.
			imgObj.src = "img01.png"; // 이미지 태그에 이미지 변경 처리
			idObj.value = "하이맨"; // input type의 입력값을 강제로 할당 처리
	3) .style.css속성 = css속성값( style속성)
			tdObj.style.textAlign = "center";
				// css의 -(데쉬)에 의해 구분된 속성은 js에서는 camel case 형태로 대문자를 추가하여
				// 	구분한다.
				td의 정렬을 중앙정렬 처리..
			tdObj.style.background = "yellow";
				td의 배경색상을 노랑색으로 처리.
11. 이벤트 : 클릭, 마우스, 키보드 입력..
	1) 이벤트 핸들러 함수 : 이벤트가 일어날 때, 처리할 내용
	2) 이벤트 : 특정한 액션으로 이벤트 핸들러 함수를 호출하게 하는 기능.
		click : 마우스클릭 시 이벤트
		keyup/keydown - event.keycode : 키보드의 고유값으로 식별하여 이벤트 처리
		focus : 특정 요소객체에 focus를 위치 시켰을 때, 발생하는 이벤트.
	3) 구조
		<태그 on이벤트명 = "핸들러함수()" />
		var obj = document.querySelector(#btn01");
		// DOM객체에 익명핸들러 함수를 지정하여 처리할 수 있다.
		obj.onclick = function(){
			alert("이벤트 호출");
		};
12. 예외처리




