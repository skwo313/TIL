# database 처리..
0. 환경 설정
1. dao 작성
	1) 공통 필드 선언
		Connection(연결객체),
		Statement(대화객체),
		ResultSet(결과객체)
	2) 공통 연결메서드 선언
		driver 메모리 로딩
		DriverManager.getConnection("연결정보","계정","비번");
		예외 처리 : ClassNotFoundException, SQLException
2. 각 기능 메서드 처리.
	1) 기본 조회처리 메서드
		public 결과데이터처리객체 기능메서드(검색에 필요한 객체){
			연결공통메서드호출
			예외처리1
			대화객체생성
			sql 수행을 통한 결과객체 생성
			결과객체를 통한 데이터 처리(객체로 할당)
			예외처리2
				- 자원해제
		}
		ex)
		public ArrayList<Emp> getEmpList(Emp sch){
			ArrayList<Emp> list = new ArrayList<Emp>();
			setConn();
			stmt = con.createStatement(); // 전역필드에 대화객체 할당
			rs = stmt.executeQuery(sql); // select문의 실행 결과를 ResultSet 객체에 담기.
			while(rs.next()){	// rs.next() : 행단위로 다음 행에 데이터가 있을 때까지 호출하는 작업
				rs.getString() : 한 행의 데이터 기준으로 해당 컬럼에 있는 데이터 가져오기
				list.add(new Emp(@@@);
			}
			rs.close(); stmt.close(); con.close(); 연결된 자원의 해제..
			try{}catch(SQLException) 예외 처리
			return list;
		}
	2) 핵심 기능 처리를 위한 이해
		- 드라이버부터 시작하여 객체들이 생성되는 과정과 메모리를 해제하는 과정이 연결되어 있다는 개념이해..
			생성순서
			DriverManager ==> Connection ==> Statement ==> ResultSet
			자원해제순서
			ResultSet ==> Statement ==> Connection
		- 결과객체(ResultSet)의 데이터 처리 기능메서드.
			.next() : 행단위로 이동하게 처리해주는 메서드, 다음 행에 데이터가 없을 때까지(boolean)
				while(rs.next())
			.getXXX("컬럼명") : 해당 컬럼의 데이터 유형과 select의 컬럼명 맞게 데이터를 가져온다.
			.getXXX(index) : 해당 컬럼의 데이터 유형과 select로 나열된 순서(1)에 맞게 데이터를 가져온다.
		- 예외 처리
			:자원의 해제에 대한 처리/기타 예외에 대한 처리.
		- ResultSet을 VO객체에 할당하고 이 VO를 모아서 ArrayList<VO>에 할당하는 처리.
			1) 처리할 단위 객체 클래스 선언하기
			2) 기본 생성자/set/get메서드 선언
			3) 메서드의 return 유형을 ArrayList로 선언하기..
			4) while() 안에서 행단위로 생성하여
				선언된 ArrayList에 할당하기..
	
	